import os
import pandas as pd
from pandas import DataFrame
import numpy as np
import ast
from sklearn.preprocessing import MinMaxScaler
import joblib

def PreprocessData(Root_Dir: str):
    DATA_DIR = os.path.join(Root_Dir, "Dataset", "PTB-XL")
    ptb_df = pd.read_csv(os.path.join(DATA_DIR, "ptbxl_database.csv"), index_col='ecg_id')

    ptb_df = _Clean_Dataframe(ptb_df)
    ptb_df.to_csv("FinalDF.csv")

    return ptb_df

def _Clean_Dataframe(df: DataFrame):
    # Drop Irelevant Features 
    FEATS_RMV: list[str] = ["nurse", "site", "device", "recording_date", "report", 
                        "second_opinion", "initial_autogenerated_report", "validated_by_human", 
                        "validated_by", "heart_axis", "infarction_stadium1", "infarction_stadium2",
                        "height", "weight"]
    
    df.drop(labels= FEATS_RMV, axis= 1, inplace= True)

    # Interpret the column as dictionaries
    df["scp_codes"] = df["scp_codes"].apply(lambda x: ast.literal_eval(x))

    df = _Encode_Features(df)

    return df

def _Encode_Features(df: DataFrame):
    # Binary Encode Pacemaker Feature
    df["pacemaker"] = np.where(df["pacemaker"] == "ja, pacemaker", 1, 0)
    df["pacemaker"] = df["pacemaker"].fillna(0).astype(np.float32)

    # Normalize age using MinMax scaling to [0, 1]
    # Fit MinMaxScaler on training data (strat_fold != 9 and != 10)
    train_mask = (df["strat_fold"] != 10) & (df["strat_fold"] != 9)
    age_scaler = MinMaxScaler().fit(df.loc[train_mask, ["age"]])

    # Transform 'age' column for the entire DataFrame
    df["age"] = age_scaler.transform(df[["age"]]).flatten()

    joblib.dump(age_scaler, "Age_Scaler_MinMax.joblib")

    # Replace noise features with a simple binary representation of their existence
    Noise_Features: tuple = ("baseline_drift", "static_noise", "burst_noise", "electrodes_problems", "extra_beats")

    for feature in Noise_Features:
        df[feature + '_present'] = df[feature].notna().astype(int)

    # Drop the original noise columns
    df.drop(columns=list(Noise_Features), inplace=True)
    
    return df